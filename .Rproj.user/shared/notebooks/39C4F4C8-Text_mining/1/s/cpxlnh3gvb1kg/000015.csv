"0","#The network graph would help with acquiring an extended semantic environment, by providing a secondary co -occurrence with the terms that co - occurred with the term ""woman"""
"0",""
"0","#For a term co-occurrence network, each triple consists of the target word, a co-occurring word and the significance of their joint occurrence. We denote the values with from, to, sig."
"0",""
"0","resultGraph <- data.frame(from = character(),"
"0","                          to = character(),"
"0","                          sig = numeric(0))"
"0",""
"0","#First, we obtain all significant co-occurrence terms for the target term. Second, we obtain all co-occurrences of the co-occurrence terms from step one."
"0",""
"0","# The structure of the temporary graph object is equal to that of the resultGraph"
"0","tmpGraph <- data.frame(from = character(),"
"0","                       to = character(),"
"0","                       sig = numeric(0))"
"0",""
"0","# Fill the data.frame to produce the correct number of lines"
"0","tmpGraph[1:numberOfCoocs, 3] <- coocs[1:numberOfCoocs]"
"0",""
"0","# Entry of the search word into the first column in all lines"
"0","tmpGraph[, 1] <- coocTerm"
"0",""
"0","# Entry of the co-occurrences into the second column of the respective line"
"0","tmpGraph[, 2] <- names(coocs)[1:numberOfCoocs]"
"0",""
"0","# Set the significances"
"0","tmpGraph[, 3] <- coocs[1:numberOfCoocs]"
"0",""
"0","# Attach the triples to resultGraph"
"0","resultGraph <- rbind(resultGraph, tmpGraph)"
"0",""
"0","# Iteration over the most significant numberOfCoocs co-occurrences of the search term"
"0","for (i in 1:numberOfCoocs) {"
"0",""
"0","# Calling up the co-occurrence calculation for term i from the search words co-occurrences"
"0","  newCoocTerm <- names(coocs)[i]"
"0","  coocs2 <- calculateCoocStatistics(newCoocTerm, binDTM, measure = ""LOGLIK"")"
"0","  "
"0","#print the co-occurrences"
"0","  coocs2[1:10]"
"0","  "
"0","# Structure of the temporary graph object"
"0","  tmpGraph <- data.frame(from = character(),"
"0","                         to = character(),"
"0","                         sig = numeric(0))"
"0","  tmpGraph[1:numberOfCoocs, 3] <- coocs2[1:numberOfCoocs]"
"0","  tmpGraph[, 1] <- newCoocTerm"
"0","  tmpGraph[, 2] <- names(coocs2)[1:numberOfCoocs]"
"0","  tmpGraph[, 3] <- coocs2[1:numberOfCoocs]"
"0","  "
"0","#Append the result to the result graph"
"0","  resultGraph <- rbind(resultGraph, tmpGraph[2:length(tmpGraph[, 1]), ])"
"0","}"
"0",""
"0","#Graphing"
"0",""
"0","# set seed for graph plot"
"0","set.seed(1)"
"0",""
"0","# Create the graph object as undirected graph"
"0","graphNetwork <- graph.data.frame(resultGraph, directed = F)"
"0",""
"0","# Identification of all nodes with less than 2 edges [co-occurring terms connected to at least 2 terms - filtering out terms cooccuring to only to one term.]"
"0","verticesToRemove <- V(graphNetwork)[degree(graphNetwork) < 2]"
"0","# These edges are removed from the graph"
"0","graphNetwork <- delete.vertices(graphNetwork, verticesToRemove)"
"0",""
"0","# Assign colors to nodes (search term blue, others orange)"
"0","V(graphNetwork)$color <- ifelse(V(graphNetwork)$name == coocTerm, 'cornflowerblue', 'orange')"
"0",""
"0","# Set edge colors"
"0","E(graphNetwork)$color <- adjustcolor(""DarkGray"", alpha.f = .5)"
"0","# scale significance between 1 and 10 for edge width"
"0","E(graphNetwork)$width <- scales::rescale(E(graphNetwork)$sig, to = c(1, 10))"
"0",""
"0","# Set edges with radius"
"0","E(graphNetwork)$curved <- 0.15"
"0","# Size the nodes by their degree of networking (scaled between 5 and 15)"
"0","V(graphNetwork)$size <- scales::rescale(log(degree(graphNetwork)), to = c(5, 15))"
"0",""
"0","# Define the frame and spacing for the plot"
"0","par(mai = c(0, 0, 1, 0))"
"0",""
"0","# Final Plot"
"0","plot("
"0","  graphNetwork,"
"0","  layout = layout.fruchterman.reingold,"
"0","  # Force Directed Layout"
"0","  main = paste(coocTerm, ' Graph'),"
"0","  vertex.label.family = ""sans"","
"0","  vertex.label.cex = 0.8,"
"0","  vertex.shape = ""circle"","
"0","  vertex.label.dist = 0.5,"
"0","  # Labels of the nodes moved slightly"
"0","  vertex.frame.color = adjustcolor(""darkgray"", alpha.f = .5),"
"0","  vertex.label.color = 'black',"
"0","  # Color of node names"
"0","  vertex.label.font = 2,"
"0","  # Font of node names"
"0","  vertex.label = V(graphNetwork)$name,"
"0","  # node names"
"0","  vertex.label.cex = 1 # font size of node names"
"0",")"
